// <auto-generated />
using System;
using EGStore.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EGStore.Infrastructure.Migrations
{
    [DbContext(typeof(EGStoreContext))]
    partial class EGStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EGStore.Domain.Entities.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("BlogImg")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Content")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("UpDay")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdateDay")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Blog", (string)null);
                });

            /*modelBuilder.Entity("EGStore.Domain.Entities.BlogImg", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BlogId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Img")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("BlogImg", (string)null);
                });*/

            modelBuilder.Entity("EGStore.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CateProdName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("CreateDay")
                        .HasColumnType("datetime");

                    b.Property<string>("Describe")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDay")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("EGStore.Domain.Entities.Delivery", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDay")
                        .HasColumnType("datetime");

                    b.Property<string>("DeliPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar");

                    b.Property<string>("DeliveryName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDay")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Delivery", (string)null);
                });

            modelBuilder.Entity("EGStore.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("CreateDay")
                        .HasColumnType("datetime");

                    b.Property<string>("CusName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar");

                    b.Property<string>("CusPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeliveryId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar");

                    b.Property<string>("NotePay")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentMenthods")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDay")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("UserId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("EGStore.Domain.Entities.OrderProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CreateDay")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("OrderId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProdName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<double?>("Sum")
                        .HasColumnType("float");

                    b.Property<double?>("UnitPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDay")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProdId");

                    b.ToTable("OrderProduct", (string)null);
                });

            modelBuilder.Entity("EGStore.Domain.Entities.Product", b =>
                {
                    b.Property<Guid?>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("CreateDay")
                        .HasColumnType("datetime");

                    b.Property<string>("Describe")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Designs")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar");

                    b.Property<double?>("Discount")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<string>("FrameMaterial")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar");

                    b.Property<double?>("Inventory")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<string>("Origin")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar");

                    b.Property<double?>("Price")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<string>("ProdCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar");

                    b.Property<string>("ProdImg")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar");

                    b.Property<string>("ProdName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar");

                    b.Property<bool?>("Sex")
                        .HasColumnType("bit");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Suitable")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar");

                    b.Property<Guid?>("SupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("UV")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDay")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupId");

                    b.ToTable("Product", (string)null);
                });

            /*modelBuilder.Entity("EGStore.Domain.Entities.ProductImg", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Img")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar");

                    b.Property<Guid?>("ProdId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProdId");

                    b.ToTable("ProductImg", (string)null);
                });*/

            modelBuilder.Entity("EGStore.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDay")
                        .HasColumnType("datetime");

                    b.Property<string>("Describe")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("UpdateDay")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("EGStore.Domain.Entities.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("CreateDay")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneContact")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar");

                    b.Property<string>("SupName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("UpdateDay")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Supplier", (string)null);
                });

            modelBuilder.Entity("EGStore.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("CreateDay")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar");

                    b.Property<Guid?>("RoleId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Sex")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDay")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);
                });

           /* modelBuilder.Entity("EGStore.Domain.Entities.BlogImg", b =>
                {
                    b.HasOne("EGStore.Domain.Entities.Blog", "Blog")
                        .WithMany("BlogImgs")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });*/

            modelBuilder.Entity("EGStore.Domain.Entities.Order", b =>
                {
                    b.HasOne("EGStore.Domain.Entities.Delivery", "Delivery")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EGStore.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Delivery");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EGStore.Domain.Entities.OrderProduct", b =>
                {
                    b.HasOne("EGStore.Domain.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EGStore.Domain.Entities.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProdId");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EGStore.Domain.Entities.Product", b =>
                {
                    b.HasOne("EGStore.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EGStore.Domain.Entities.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupId");

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

           /* modelBuilder.Entity("EGStore.Domain.Entities.ProductImg", b =>
                {
                    b.HasOne("EGStore.Domain.Entities.Product", "Product")
                        .WithMany("ProductImgs")
                        .HasForeignKey("ProdId");

                    b.Navigation("Product");
                })*/;

            modelBuilder.Entity("EGStore.Domain.Entities.User", b =>
                {
                    b.HasOne("EGStore.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EGStore.Domain.Entities.Blog", b =>
                {
                    b.Navigation("BlogImgs");
                });

            modelBuilder.Entity("EGStore.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EGStore.Domain.Entities.Delivery", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("EGStore.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("EGStore.Domain.Entities.Product", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("ProductImgs");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("EGStore.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("EGStore.Domain.Entities.Supplier", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EGStore.Domain.Entities.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
